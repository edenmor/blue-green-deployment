#!/bin/bash

# ArgoCD ApplicationSet Deployment Script
# This demonstrates the ApplicationSet pattern for blue-green deployments

set -e

echo "🚀 Deploying Blue-Green Flask App via ArgoCD ApplicationSet pattern..."

# Check if ArgoCD is running
if ! kubectl get pods -n argocd &>/dev/null; then
    echo "❌ ArgoCD is not found in the argocd namespace"
    echo "Please install ArgoCD first:"
    echo "kubectl create namespace argocd"
    echo "kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
    exit 1
fi

echo "✅ ArgoCD found, proceeding with ApplicationSet deployment..."

# Remove any existing App of Apps if present
echo "🧹 Cleaning up existing App of Apps (if any)..."
kubectl delete application blue-green-apps -n argocd --ignore-not-found=true
kubectl delete application flask-blue-green-app -n argocd --ignore-not-found=true

# Apply the ApplicationSet
echo "📦 Creating ApplicationSet..."
kubectl apply -f argocd-apps/applicationset-blue-green.yaml

echo "⏳ Waiting for ApplicationSet to generate applications..."
sleep 10

# Check the applications generated by ApplicationSet
echo "📊 Applications generated by ApplicationSet:"
kubectl get applications -n argocd -l environment

echo ""
echo "📊 ApplicationSet status:"
kubectl get applicationset -n argocd

echo ""
echo "🎉 ApplicationSet deployment completed!"
echo ""
echo "Key differences from App of Apps:"
echo "✅ Dynamic generation: ApplicationSet automatically created 2 apps (blue & green)"
echo "✅ Templating: One template generates multiple environments"
echo "✅ Parameterization: Each environment has different ports, versions, etc."
echo "✅ Scalability: Easy to add more environments by updating the list generator"
echo ""
echo "Generated Applications:"
echo "- flask-blue-app: Port 8080, Version 1.0.0, Active: true"
echo "- flask-green-app: Port 80, Version 2.0.0, Active: false"
echo ""
echo "To access ArgoCD UI:"
echo "kubectl port-forward svc/argocd-server -n argocd 8080:443"
echo "Username: admin"
echo "Password: \$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)"
